// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clavel/deployment/v1/deployment.proto

package deployment_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/erikeah/clavel/pkg/pb/deployment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "clavel.deployment.v1.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploymentServiceShowProcedure is the fully-qualified name of the DeploymentService's Show RPC.
	DeploymentServiceShowProcedure = "/clavel.deployment.v1.DeploymentService/Show"
)

// DeploymentServiceClient is a client for the clavel.deployment.v1.DeploymentService service.
type DeploymentServiceClient interface {
	Show(context.Context, *connect.Request[v1.DeploymentServiceShowRequest]) (*connect.Response[v1.DeploymentServiceShowResponse], error)
}

// NewDeploymentServiceClient constructs a client for the clavel.deployment.v1.DeploymentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deploymentServiceMethods := v1.File_clavel_deployment_v1_deployment_proto.Services().ByName("DeploymentService").Methods()
	return &deploymentServiceClient{
		show: connect.NewClient[v1.DeploymentServiceShowRequest, v1.DeploymentServiceShowResponse](
			httpClient,
			baseURL+DeploymentServiceShowProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("Show")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	show *connect.Client[v1.DeploymentServiceShowRequest, v1.DeploymentServiceShowResponse]
}

// Show calls clavel.deployment.v1.DeploymentService.Show.
func (c *deploymentServiceClient) Show(ctx context.Context, req *connect.Request[v1.DeploymentServiceShowRequest]) (*connect.Response[v1.DeploymentServiceShowResponse], error) {
	return c.show.CallUnary(ctx, req)
}

// DeploymentServiceHandler is an implementation of the clavel.deployment.v1.DeploymentService
// service.
type DeploymentServiceHandler interface {
	Show(context.Context, *connect.Request[v1.DeploymentServiceShowRequest]) (*connect.Response[v1.DeploymentServiceShowResponse], error)
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServiceMethods := v1.File_clavel_deployment_v1_deployment_proto.Services().ByName("DeploymentService").Methods()
	deploymentServiceShowHandler := connect.NewUnaryHandler(
		DeploymentServiceShowProcedure,
		svc.Show,
		connect.WithSchema(deploymentServiceMethods.ByName("Show")),
		connect.WithHandlerOptions(opts...),
	)
	return "/clavel.deployment.v1.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServiceShowProcedure:
			deploymentServiceShowHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) Show(context.Context, *connect.Request[v1.DeploymentServiceShowRequest]) (*connect.Response[v1.DeploymentServiceShowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clavel.deployment.v1.DeploymentService.Show is not implemented"))
}
